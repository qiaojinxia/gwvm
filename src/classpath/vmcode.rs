use crate::classpath::vmcode::Inst::Code;

pub mod cmcode {}
#[rustfmt::skip]
#[allow(non_upper_case_globals)]
#[allow(non_snake_case)]
pub mod Inst {
    pub type Code = u8;

    pub const nop: u8 = 0;
    pub const aconst_null: u8 = 1;
    pub const iconst_m1: u8 = 2;
    pub const iconst_0: u8 = 3;
    pub const iconst_1: u8 = 4;
    pub const iconst_2: u8 = 5;
    pub const iconst_3: u8 = 6;
    pub const iconst_4: u8 = 7;
    pub const iconst_5: u8 = 8;
    pub const lconst_0: u8 = 9;
    pub const lconst_1: u8 = 10;
    pub const fconst_0: u8 = 11;
    pub const fconst_1: u8 = 12;
    pub const fconst_2: u8 = 13;
    pub const dconst_0: u8 = 14;
    pub const dconst_1: u8 = 15;
    pub const bipush: u8 = 16;
    pub const sipush: u8 = 17;
    pub const ldc: u8 = 18;
    pub const ldc_w: u8 = 19;
    pub const ldc2_w: u8 = 20;
    pub const iload: u8 = 21;
    pub const lload: u8 = 22;
    pub const fload: u8 = 23;
    pub const dload: u8 = 24;
    pub const aload: u8 = 25;
    pub const iload_0: u8 = 26;
    pub const iload_1: u8 = 27;
    pub const iload_2: u8 = 28;
    pub const iload_3: u8 = 29;
    pub const lload_0: u8 = 30;
    pub const lload_1: u8 = 31;
    pub const lload_2: u8 = 32;
    pub const lload_3: u8 = 33;
    pub const fload_0: u8 = 34;
    pub const fload_1: u8 = 35;
    pub const fload_2: u8 = 36;
    pub const fload_3: u8 = 37;
    pub const dload_0: u8 = 38;
    pub const dload_1: u8 = 39;
    pub const dload_2: u8 = 40;
    pub const dload_3: u8 = 41;
    pub const aload_0: u8 = 42;
    pub const aload_1: u8 = 43;
    pub const aload_2: u8 = 44;
    pub const aload_3: u8 = 45;
    pub const iaload: u8 = 46;
    pub const laload: u8 = 47;
    pub const faload: u8 = 48;
    pub const daload: u8 = 49;
    pub const aaload: u8 = 50;
    pub const baload: u8 = 51;
    pub const caload: u8 = 52;
    pub const saload: u8 = 53;
    pub const istore: u8 = 54;
    pub const lstore: u8 = 55;
    pub const fstore: u8 = 56;
    pub const dstore: u8 = 57;
    pub const astore: u8 = 58;
    pub const istore_0: u8 = 59;
    pub const istore_1: u8 = 60;
    pub const istore_2: u8 = 61;
    pub const istore_3: u8 = 62;
    pub const lstore_0: u8 = 63;
    pub const lstore_1: u8 = 64;
    pub const lstore_2: u8 = 65;
    pub const lstore_3: u8 = 66;
    pub const fstore_0: u8 = 67;
    pub const fstore_1: u8 = 68;
    pub const fstore_2: u8 = 69;
    pub const fstore_3: u8 = 70;
    pub const dstore_0: u8 = 71;
    pub const dstore_1: u8 = 72;
    pub const dstore_2: u8 = 73;
    pub const dstore_3: u8 = 74;
    pub const astore_0: u8 = 75;
    pub const astore_1: u8 = 76;
    pub const astore_2: u8 = 77;
    pub const astore_3: u8 = 78;
    pub const iastore: u8 = 79;
    pub const lastore: u8 = 80;
    pub const fastore: u8 = 81;
    pub const dastore: u8 = 82;
    pub const aastore: u8 = 83;
    pub const bastore: u8 = 84;
    pub const castore: u8 = 85;
    pub const sastore: u8 = 86;
    pub const pop: u8 = 87;
    pub const pop2: u8 = 88;
    pub const dup: u8 = 89;
    pub const dup_x1: u8 = 90;
    pub const dup_x2: u8 = 91;
    pub const dup2: u8 = 92;
    pub const dup2_x1: u8 = 93;
    pub const dup2_x2: u8 = 94;
    pub const swap: u8 = 95;
    pub const iadd: u8 = 96;
    pub const ladd: u8 = 97;
    pub const fadd: u8 = 98;
    pub const dadd: u8 = 99;
    pub const isub: u8 = 100;
    pub const lsub: u8 = 101;
    pub const fsub: u8 = 102;
    pub const dsub: u8 = 103;
    pub const imul: u8 = 104;
    pub const lmul: u8 = 105;
    pub const fmul: u8 = 106;
    pub const dmul: u8 = 107;
    pub const idiv: u8 = 108;
    pub const ldiv: u8 = 109;
    pub const fdiv: u8 = 110;
    pub const ddiv: u8 = 111;
    pub const irem: u8 = 112;
    pub const lrem: u8 = 113;
    pub const frem: u8 = 114;
    pub const drem: u8 = 115;
    pub const ineg: u8 = 116;
    pub const lneg: u8 = 117;
    pub const fneg: u8 = 118;
    pub const dneg: u8 = 119;
    pub const ishl: u8 = 120;
    pub const lshl: u8 = 121;
    pub const ishr: u8 = 122;
    pub const lshr: u8 = 123;
    pub const iushr: u8 = 124;
    pub const lushr: u8 = 125;
    pub const iand: u8 = 126;
    pub const land: u8 = 127;
    pub const ior: u8 = 128;
    pub const lor: u8 = 129;
    pub const ixor: u8 = 130;
    pub const lxor: u8 = 131;
    pub const iinc: u8 = 132;
    pub const i2l: u8 = 133;
    pub const i2f: u8 = 134;
    pub const i2d: u8 = 135;
    pub const l2i: u8 = 136;
    pub const l2f: u8 = 137;
    pub const l2d: u8 = 138;
    pub const f2i: u8 = 139;
    pub const f2l: u8 = 140;
    pub const f2d: u8 = 141;
    pub const d2i: u8 = 142;
    pub const d2l: u8 = 143;
    pub const d2f: u8 = 144;
    pub const i2b: u8 = 145;
    pub const i2c: u8 = 146;
    pub const i2s: u8 = 147;
    pub const lcmp: u8 = 148;
    pub const fcmpl: u8 = 149;
    pub const fcmpg: u8 = 150;
    pub const dcmpl: u8 = 151;
    pub const dcmpg: u8 = 152;
    pub const ifeq: u8 = 153;
    pub const ifne: u8 = 154;
    pub const iflt: u8 = 155;
    pub const ifge: u8 = 156;
    pub const ifgt: u8 = 157;
    pub const ifle: u8 = 158;
    pub const if_icmpeq: u8 = 159;
    pub const if_icmpne: u8 = 160;
    pub const if_icmplt: u8 = 161;
    pub const if_icmpge: u8 = 162;
    pub const if_icmpgt: u8 = 163;
    pub const if_icmple: u8 = 164;
    pub const if_acmpeq: u8 = 165;
    pub const if_acmpne: u8 = 166;
    pub const _goto: u8 = 167;
    pub const jsr: u8 = 168;
    pub const ret: u8 = 169;
    pub const tableswitch: u8 = 170;
    pub const lookupswitch: u8 = 171;
    pub const ireturn: u8 = 172;
    pub const lreturn: u8 = 173;
    pub const freturn: u8 = 174;
    pub const dreturn: u8 = 175;
    pub const areturn: u8 = 176;
    pub const _return: u8 = 177;
    pub const getstatic: u8 = 178;
    pub const putstatic: u8 = 179;
    pub const getfield: u8 = 180;
    pub const putfield: u8 = 181;
    pub const invokevirtual: u8 = 182;
    pub const invokespecial: u8 = 183;
    pub const invokestatic: u8 = 184;
    pub const invokeinterface: u8 = 185;
    pub const invokedynamic: u8 = 186;
    pub const new: u8 = 187;
    pub const newarray: u8 = 188;
    pub const anewarray: u8 = 189;
    pub const arraylength: u8 = 190;
    pub const athrow: u8 = 191;
    pub const checkcast: u8 = 192;
    pub const _instanceof: u8 = 193;
    pub const monitorenter: u8 = 194;
    pub const monitorexit: u8 = 195;
    pub const wide: u8 = 196;
    pub const multianewarray: u8 = 197;
    pub const ifnull: u8 = 198;
    pub const ifnonnull: u8 = 199;
    pub const goto_w: u8 = 200;
    pub const jsr_w: u8 = 201;
    pub const breakpoint: u8 = 202;
    pub const impdep1: u8 = 254;
    pub const impdep2: u8 = 255;

    pub fn get_inst_desc(inst: Code) -> String {
        match inst {
            0 => "None",
            1 => "将null推送至栈顶",
            2 => "将int型-1推送至栈顶",
            3 => "将int型0推送至栈顶",
            4 => "将int型1推送至栈顶",
            5 => "将int型2推送至栈顶",
            6 => "将int型3推送至栈顶",
            7 => "将int型4推送至栈顶",
            8 => "将int型5推送至栈顶",
            9 => "将long型0推送至栈顶",
            10 => "将long型1推送至栈顶",
            11 => "将float型0推送至栈顶",
            12 => "将float型1推送至栈顶",
            13 => "将float型2推送至栈顶",
            14 => "将double型0推送至栈顶",
            15 => "将double型1推送至栈顶",
            16 => "将单字节的常量值(-128~127)推送至栈顶",
            17 => "将一个短整型常量(-32768~32767)推送至栈顶",
            18 => "将int,float或String型常量值从常量池中推送至栈顶",
            19 => "将int,float或String型常量值从常量池中推送至栈顶(宽索引)",
            20 => "将long或double型常量值从常量池中推送至栈顶(宽索引)",
            21 => "将指定的int型本地变量推送至栈顶",
            22 => "将指定的long型本地变量推送至栈顶",
            23 => "将指定的float型本地变量推送至栈顶",
            24 => "将指定的double型本地变量推送至栈顶",
            25 => "将指定的引用类型本地变量推送至栈顶",
            26 => "将第一个int型本地变量推送至栈顶",
            27 => "将第二个int型本地变量推送至栈顶",
            28 => "将第三个int型本地变量推送至栈顶",
            29 => "将第四个int型本地变量推送至栈顶",
            30 => "将第一个long型本地变量推送至栈顶",
            31 => "将第二个long型本地变量推送至栈顶",
            32 => "将第三个long型本地变量推送至栈顶",
            33 => "将第四个long型本地变量推送至栈顶",
            34 => "将第一个float型本地变量推送至栈顶",
            35 => "将第二个float型本地变量推送至栈顶",
            36 => "将第三个float型本地变量推送至栈顶",
            37 => "将第四个float型本地变量推送至栈顶",
            38 => "将第一个double型本地变量推送至栈顶",
            39 => "将第二个double型本地变量推送至栈顶",
            40 => "将第三个double型本地变量推送至栈顶",
            41 => "将第四个double型本地变量推送至栈顶",
            42 => "将第一个引用类型本地变量推送至栈顶",
            43 => "将第二个引用类型本地变量推送至栈顶",
            44 => "将第三个引用类型本地变量推送至栈顶",
            45 => "将第四个引用类型本地变量推送至栈顶",
            46 => "将int型数组指定索引的值推送至栈顶",
            47 => "将long型数组指定索引的值推送至栈顶",
            48 => "将float型数组指定索引的值推送至栈顶",
            49 => "将double型数组指定索引的值推送至栈顶",
            50 => "将引用类型数组指定索引的值推送至栈顶",
            51 => "将boolean或byte型数组指定索引的值推送至栈顶",
            52 => "将char型数组指定索引的值推送至栈顶",
            53 => "将short型数组指定索引的值推送至栈顶",
            54 => "将栈顶int型数值存入指定本地变量",
            55 => "将栈顶long型数值存入指定本地变量",
            56 => "将栈顶float型数值存入指定本地变量",
            57 => "将栈顶double型数值存入指定本地变量",
            58 => "将栈顶引用类型数值存入指定本地变量",
            59 => "将栈顶int型数值存入第一个本地变量",
            60 => "将栈顶int型数值存入第二个本地变量",
            61 => "将栈顶int型数值存入第三个本地变量",
            62 => "将栈顶int型数值存入第四个本地变量",
            63 => "将栈顶long型数值存入第一个本地变量",
            64 => "将栈顶long型数值存入第二个本地变量",
            65 => "将栈顶long型数值存入第三个本地变量",
            66 => "将栈顶long型数值存入第四个本地变量",
            67 => "将栈顶float型数值存入第一个本地变量",
            68 => "将栈顶float型数值存入第二个本地变量",
            69 => "将栈顶float型数值存入第三个本地变量",
            70 => "将栈顶float型数值存入第四个本地变量",
            71 => "将栈顶double型数值存入第一个本地变量",
            72 => "将栈顶double型数值存入第二个本地变量",
            73 => "将栈顶double型数值存入第三个本地变量",
            74 => "将栈顶double型数值存入第四个本地变量",
            75 => "将栈顶引用型数值存入第一个本地变量",
            76 => "将栈顶引用型数值存入第二个本地变量",
            77 => "将栈顶引用型数值存入第三个本地变量",
            78 => "将栈顶引用型数值存入第四个本地变量",
            79 => "将栈顶int型数值存入指定数组的指定索引位置",
            80 => "将栈顶long型数值存入指定数组的指定索引位置",
            81 => "将栈顶float型数值存入指定数组的指定索引位置",
            82 => "将栈顶double型数值存入指定数组的指定索引位置",
            83 => "将栈顶引用型数值存入指定数组的指定索引位置",
            84 => "将栈顶boolean或byte型数值存入指定数组的指定索引位置",
            85 => "将栈顶char型数值存入指定数组的指定索引位置",
            86 => "将栈顶short型数值存入指定数组的指定索引位置",
            87 => "将栈顶数值弹出(数值不能是long或double类型的)",
            88 => "将栈顶的一个(对于非long或double类型)或两个数值(对于非long或double的其他类型)弹出",
            89 => "复制栈顶数值并将复制值压入栈顶",
            90 => "复制栈顶数值并将两个复制值压入栈顶",
            91 => "复制栈顶数值并将三个(或两个)复制值压入栈顶",
            92 => "复制栈顶一个(对于long或double类型)或两个(对于非long或double的其他类型)数值并将复制值压入栈顶",
            93 => "dup_x1指令的双倍版本",
            94 => "dup_x2指令的双倍版本",
            95 => "将栈顶最顶端的两个数值互换(数值不能是long或double类型)",
            96 => "将栈顶两int型数值相加并将结果压入栈顶",
            97 => "将栈顶两long型数值相加并将结果压入栈顶",
            98 => "将栈顶两float型数值相加并将结果压入栈顶",
            99 => "将栈顶两double型数值相加并将结果压入栈顶",
            100 => "将栈顶两int型数值相减并将结果压入栈顶",
            101 => "将栈顶两long型数值相减并将结果压入栈顶",
            102 => "将栈顶两float型数值相减并将结果压入栈顶",
            103 => "将栈顶两double型数值相减并将结果压入栈顶",
            104 => "将栈顶两int型数值相乘并将结果压入栈顶",
            105 => "将栈顶两long型数值相乘并将结果压入栈顶",
            106 => "将栈顶两float型数值相乘并将结果压入栈顶",
            107 => "将栈顶两double型数值相乘并将结果压入栈顶",
            108 => "将栈顶两int型数值相除并将结果压入栈顶",
            109 => "将栈顶两long型数值相除并将结果压入栈顶",
            110 => "将栈顶两float型数值相除并将结果压入栈顶",
            111 => "将栈顶两double型数值相除并将结果压入栈顶",
            112 => "将栈顶两int型数值作取模运算并将结果压入栈顶",
            113 => "将栈顶两long型数值作取模运算并将结果压入栈顶",
            114 => "将栈顶两float型数值作取模运算并将结果压入栈顶",
            115 => "将栈顶两double型数值作取模运算并将结果压入栈顶",
            116 => "将栈顶int型数值取负并将结果压入栈顶",
            117 => "将栈顶long型数值取负并将结果压入栈顶",
            118 => "将栈顶float型数值取负并将结果压入栈顶",
            119 => "将栈顶double型数值取负并将结果压入栈顶",
            120 => "将int型数值左移指定位数并将结果压入栈顶",
            121 => "将long型数值左移指定位数并将结果压入栈顶",
            122 => "将int型数值右(带符号)移指定位数并将结果压入栈顶",
            123 => "将long型数值右(带符号)移指定位数并将结果压入栈顶",
            124 => "将int型数值右(无符号)移指定位数并将结果压入栈顶",
            125 => "将long型数值右(无符号)移指定位数并将结果压入栈顶",
            126 => "将栈顶两int型数值\"按位与\"并将结果压入栈顶",
            127 => "将栈顶两long型数值\"按位与\"并将结果压入栈顶",
            128 => "将栈顶两int型数值\"按位或\"并将结果压入栈顶",
            129 => "将栈顶两long型数值\"按位或\"并将结果压入栈顶",
            130 => "将栈顶两int型数值\"按位异或\"并将结果压入栈顶",
            131 => "将栈顶两long型数值\"按位异或\"并将结果压入栈顶",
            132 => "将指定int型变量增加指定值(如i++, i--, i+=2等)",
            133 => "将栈顶int型数值强制转换为long型数值并将结果压入栈顶",
            134 => "将栈顶int型数值强制转换为float型数值并将结果压入栈顶",
            135 => "将栈顶int型数值强制转换为double型数值并将结果压入栈顶",
            136 => "将栈顶long型数值强制转换为int型数值并将结果压入栈顶",
            137 => "将栈顶long型数值强制转换为float型数值并将结果压入栈顶",
            138 => "将栈顶long型数值强制转换为double型数值并将结果压入栈顶",
            139 => "将栈顶float型数值强制转换为int型数值并将结果压入栈顶",
            140 => "将栈顶float型数值强制转换为long型数值并将结果压入栈顶",
            141 => "将栈顶float型数值强制转换为double型数值并将结果压入栈顶",
            142 => "将栈顶double型数值强制转换为int型数值并将结果压入栈顶",
            143 => "将栈顶double型数值强制转换为long型数值并将结果压入栈顶",
            144 => "将栈顶double型数值强制转换为float型数值并将结果压入栈顶",
            145 => "将栈顶int型数值强制转换为byte型数值并将结果压入栈顶",
            146 => "将栈顶int型数值强制转换为char型数值并将结果压入栈顶",
            147 => "将栈顶int型数值强制转换为short型数值并将结果压入栈顶",
            148 => "比较栈顶两long型数值大小, 并将结果(1, 0或-1)压入栈顶",
            149 => "比较栈顶两float型数值大小, 并将结果(1, 0或-1)压入栈顶; 当其中一个数值为NaN时, 将-1压入栈顶",
            150 => "比较栈顶两float型数值大小, 并将结果(1, 0或-1)压入栈顶; 当其中一个数值为NaN时, 将1压入栈顶",
            151 => "比较栈顶两double型数值大小, 并将结果(1, 0或-1)压入栈顶; 当其中一个数值为NaN时, 将-1压入栈顶",
            152 => "比较栈顶两double型数值大小, 并将结果(1, 0或-1)压入栈顶; 当其中一个数值为NaN时, 将1压入栈顶",
            153 => "当栈顶int型数值等于0时跳转",
            154 => "当栈顶int型数值不等于0时跳转",
            155 => "当栈顶int型数值小于0时跳转",
            156 => "当栈顶int型数值大于等于0时跳转",
            157 => "当栈顶int型数值大于0时跳转",
            158 => "当栈顶int型数值小于等于0时跳转",
            159 => "比较栈顶两int型数值大小, 当结果等于0时跳转",
            160 => "比较栈顶两int型数值大小, 当结果不等于0时跳转",
            161 => "比较栈顶两int型数值大小, 当结果小于0时跳转",
            162 => "比较栈顶两int型数值大小, 当结果大于等于0时跳转",
            163 => "比较栈顶两int型数值大小, 当结果大于0时跳转",
            164 => "比较栈顶两int型数值大小, 当结果小于等于0时跳转",
            165 => "比较栈顶两引用型数值, 当结果相等时跳转",
            166 => "比较栈顶两引用型数值, 当结果不相等时跳转",
            167 => "无条件跳转",
            168 => "跳转至指定的16位offset位置, 并将jsr的下一条指令地址压入栈顶",
            169 => "返回至本地变量指定的index的指令位置(一般与jsr或jsr_w联合使用)",
            170 => "用于switch条件跳转, case值连续(可变长度指令)",
            171 => "用于switch条件跳转, case值不连续(可变长度指令)",
            172 => "从当前方法返回int",
            173 => "从当前方法返回long",
            174 => "从当前方法返回float",
            175 => "从当前方法返回double",
            176 => "从当前方法返回对象引用",
            177 => "从当前方法返回void",
            178 => "获取指定类的静态域, 并将其压入栈顶",
            179 => "为指定类的静态域赋值",
            180 => "获取指定类的实例域, 并将其压入栈顶",
            181 => "为指定类的实例域赋值",
            182 => "调用实例方法",
            183 => "调用超类构建方法, 实例初始化方法, 私有方法",
            184 => "调用静态方法",
            185 => "调用接口方法",
            186 => "调用动态方法",
            187 => "创建一个对象, 并将其引用引用值压入栈顶",
            188 => "创建一个指定的原始类型(如int, float, char等)的数组, 并将其引用值压入栈顶",
            189 => "创建一个引用型(如类, 接口, 数组)的数组, 并将其引用值压入栈顶",
            190 => "获取数组的长度值并压入栈顶",
            191 => "将栈顶的异常抛出",
            192 => "检验类型转换, 检验未通过将抛出 ClassCastException",
            193 => "检验对象是否是指定类的实际, 如果是将1压入栈顶, 否则将0压入栈顶",
            194 => "获得对象的锁, 用于同步方法或同步块",
            195 => "释放对象的锁, 用于同步方法或同步块",
            196 => "扩展本地变量的宽度",
            197 => "创建指定类型和指定维度的多维数组(执行该指令时, 操作栈中必须包含各维度的长度值), 并将其引用压入栈顶",
            198 => "为null时跳转",
            199 => "不为null时跳转",
            200 => "无条件跳转(宽索引)",
            201 => "跳转至指定的32位offset位置, 并将jsr_w的下一条指令地址压入栈顶",
            _ => {unreachable!()}
        }.parse().unwrap()
    }
    pub fn get_inst_size(inst: Code) -> usize {
        match inst {
            bipush | ldc | iload | lload | fload | dload | aload | istore | lstore | fstore
            | dstore | astore | ret | newarray => 2,
            nop | aconst_null | iconst_m1 | iconst_0 | iconst_1 | iconst_2 | iconst_3 | iconst_4
            | iconst_5 | lconst_0 | lconst_1 | fconst_0 | fconst_1 | fconst_2 | dconst_0 | dconst_1
            | iload_0 | iload_1 | iload_2 | iload_3 | lload_0 | lload_1 | lload_2 | lload_3
            | fload_0 | fload_1 | fload_2 | fload_3 | dload_0 | dload_1 | dload_2 | dload_3
            | aload_0 | aload_1 | aload_2 | aload_3 | iaload | laload | faload | daload | aaload
            | baload | caload | saload | istore_0 | istore_1 | istore_2 | istore_3 | lstore_0
            | lstore_1 | lstore_2 | lstore_3 | fstore_0 | fstore_1 | fstore_2 | fstore_3 | dstore_0
            | dstore_1 | dstore_2 | dstore_3 | astore_0 | astore_1 | astore_2 | astore_3 | iastore
            | lastore | fastore | dastore | aastore | bastore | castore | sastore | pop | pop2
            | dup | dup_x1 | dup_x2 | dup2 | dup2_x1 | dup2_x2 | swap | iadd | ladd | fadd | dadd
            | isub | lsub | fsub | dsub | imul | lmul | fmul | dmul | idiv | ldiv | fdiv | ddiv
            | irem | lrem | frem | drem | ineg | lneg | fneg | dneg | ishl | lshl | ishr | lshr
            | iushr | lushr | iand | land | ior | lor | ixor | lxor | i2l | i2f | i2d | l2i | l2f
            | l2d | f2i | f2l | f2d | d2i | d2l | d2f | i2b | i2c | i2s | lcmp | fcmpl | fcmpg
            | dcmpl | dcmpg | tableswitch | lookupswitch | ireturn | lreturn | freturn | dreturn
            | areturn | _return | arraylength | athrow | monitorenter | monitorexit | wide
            | breakpoint | impdep1 | impdep2 => 1,
            multianewarray => 4,
            sipush | ldc_w | ldc2_w | iinc | ifeq | ifne | iflt | ifge | ifgt | ifle | if_icmpeq
            | if_icmpne | if_icmplt | if_icmpge | if_icmpgt | if_icmple | if_acmpeq | if_acmpne
            | _goto | jsr | getstatic | putstatic | getfield | putfield | invokevirtual
            | invokespecial | invokestatic | new | anewarray | checkcast | _instanceof | ifnull
            | ifnonnull => 3,
            invokeinterface | invokedynamic | goto_w | jsr_w => 5,
            e => unimplemented!("{}", e),
        }
    }
}
